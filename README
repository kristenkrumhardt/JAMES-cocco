---------
| ABOUT |
---------

The MARine Biogeochemistry Library (MARBL) is organized as follows:

    MARBL
    ├── include                       subdirectories contain default location for module files
    |   |                             to be included when linking the MARBL library
    |   |                             * subdirectories for each compiler / MPI option
    │   ├── cray
    │   ├── gnu
    │   ├── gnu-mpi
    │   ├── intel
    │   ├── intel-mpi
    │   ├── nag
    │   ├── nag-mpi
    │   ├── pgi
    │   └── pgi-mpi
    ├── lib                           default location of libmarbl.a (or libmarbl-[compiler].a)
    ├── src                           Source code for MARBL library (Fortran)
    └── tests
        ├── bld_tests                 Test the MARBL build system
        |                             (library build as well as fortran driver executable)
        ├── driver_exe                Default location for marbl.exe (or marbl-mpi.exe)
        ├── driver_src                Fortran source code for the stand-alone driver used
        |                             by the test system (calls into MARBL library)
        ├── input_files               Input files for regression tests
        ├── obj                       subdirectories contain default location for object files
        |   |                         * subdirectories for each compiler / MPI option, which are
        |   |                           then further divided to separate stand-alone driver objects
        |   |                           from library objects
        │   ├── cray
        │   │   └── driver
        │   ├── gnu
        │   │   └── driver
        │   ├── gnu-mpi
        │   │   └── driver
        │   ├── intel
        │   │   └── driver
        │   ├── intel-mpi
        │   │   └── driver
        │   ├── nag
        │   │   └── driver
        │   ├── nag-mpi
        │   │   └── driver
        │   ├── pgi
        │   │   └── driver
        │   └── pgi-mpi
        │       └── driver
        ├── python_for_tests          Python modules for code that is used by multiple test
        |                             scripts. E.g. routines to parse command line arguments,
        |                             build the library, or load modules on supported machines
        ├── regression_tests          Tests that produce output with various MARBL configurations
        │   |                         so developers can quickly check the effect of new code
        │   ├── gen_input_file        Generate a valid input file
        │   ├── init                  Run initialization
        │   ├── init-twice            Initialize, finalize, and initialize again
        |   |                         * Ensures memory is deallocated correctly in finalize
        │   ├── requested_diags       List all diagnostics being provided by MARBL
        │   ├── requested_forcings    List all forcing fields MARBL requests from GCM
        │   ├── requested_restoring   List all tracers MARBL will apply restoring to
        │   └── requested_tracers     List all tracers MARBL will provide tendencies for
        └── unit_tests                Tests that check the functionality of small pieces of the code
            ├── get_put               Make sure parameters are registered correctly for
            |                         get_setting() and put_setting()
            └── utils_routines        Make sure all tools provided in marbl_utils_mod.F90
                                       what they claim to do (esp. tests edge cases)

---------------------------------------------
| INSTALLING THE LIBRARY FOR EXTERNAL USAGE |
---------------------------------------------

The Makefile in src/ provides all that is needed to build the library. For
testing purposes, you can run

$ make [gnu|intel|pgi|nag|cray]

to build with a specific compiler using pre-set compiler flags. However, if
you want to build MARBL to link with an outside program, you may want more
control over the compile-time options. To that end, run

$ make OBJ_DIR=[location of object files] depends
$ make [desired_location_of_lib]/libmarbl.a \
       USE_DEPS=TRUE \
       FC=[compiler] \
       FCFLAGS="[compiler flags]" \
       OBJ_DIR=[location of object files] \
       INC_DIR=[location of .mod files]

The first call will produce the dependency file (shared_deps.d), the second call
will build libmarbl.a and the *.mod files. When building the GCM, you will need
to add

-I$(INC_DIR)

And when linking

-L$(LIB_DIR) -lmarbl

